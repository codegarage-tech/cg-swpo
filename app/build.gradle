apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion appCompileSdkVersion
    buildToolsVersion appBuildToolsVersion

    signingConfigs {
        releaseConfig {
            try {
                keyAlias 'keydata.keystore'
                keyPassword KEY_PASSWORD
                storeFile file('../misc/keydata.keystore.jks')
                storePassword STORE_PASSWORD
            } catch (Exception ex) {
                throw new InvalidUserDataException(ex.getMessage().toString())
            }
        }
    }

    defaultConfig {
        applicationId applicationId
        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        // define your base Applications name here
        resValue 'string', 'app_name', applicationName
    }

    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            shrinkResources true
            minifyEnabled true
            debuggable false

            //For single file
//            proguardFile 'aboutbox.pro'
            //For all files
//            proguardFiles fileTree(dir: "rules", include: ["*.pro"]).asList().toArray()

            //Default proguard call
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }

    //Format output
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            println variant

            //Rename the output apk file
            def appName = variant.mergedFlavor.resValues.get('app_name').getValue()
            def underScore = "_"
            def version = variant.versionName
            def buildType = variant.buildType.name
            def releaseApkName = appName + underScore + version + underScore + convertToCamelCase(buildType) + ".apk"
            outputFileName = releaseApkName

            // set new resVale
            variant.resValue 'string', 'app_name', appName
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

def static String convertToCamelCase(String str) {
    if (str == null) {
        return null
    }

    boolean space = true
    StringBuilder builder = new StringBuilder(str)
    final int len = builder.length()

    for (int i = 0; i < len; ++i) {
        char c = builder.charAt(i)
        if (space) {
            if (!Character.isWhitespace(c)) {
                // Convert to title case and switch out of whitespace mode.
                builder.setCharAt(i, Character.toTitleCase(c))
                space = false
            }
        } else if (Character.isWhitespace(c)) {
            space = true
        } else {
            builder.setCharAt(i, Character.toLowerCase(c))
        }
    }

    return builder.toString()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //Androidx support libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "androidx.core:core:$androidXCoreVersion"
    implementation "androidx.core:core-ktx:$androidXCoreKotlinLibraryVersion"
    implementation "androidx.constraintlayout:constraintlayout:$androidXConstraintLayoutVersion"
    implementation "androidx.multidex:multidex:$androidXMultiDexVersion"

    // Youtube player
    implementation "com.pierfrancescosoffritti.androidyoutubeplayer:core:$youtubePlayerVersion"

    // Image loading
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"

    // Parceler
//    implementation "org.parceler:parceler-api:$parcelerVersion"
//    annotationProcessor "org.parceler:parceler:$parcelerVersion"

    // Retrofit for server communication
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'

    // volley
    implementation "com.android.volley:volley:$volleyVersion"

    // Barcode
    implementation "com.journeyapps:zxing-android-embedded:$zxingVersion"

    // Location library
    implementation "com.google.android.gms:play-services-location:$googlePlayServiceLocationVersion"

    //Parceler
    implementation 'org.parceler:parceler-api:1.1.12'
    annotationProcessor 'org.parceler:parceler:1.1.12'

    // Util
    implementation "com.reversecoder.library:rc-library:$libraryVersion"

    // Switch icon
    implementation 'com.github.zagum:Android-SwitchIcon:1.3.8'

    //FCM implementation
    implementation "com.google.firebase:firebase-core:$firebaseCoreVersion"
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingVersion"
    // Live Chat
    implementation 'com.github.livechat:chat-window-android:v2.0.4'

    // Library projects
    implementation project(":library:meowbottomnavigation")
    implementation project(":library:androidimageslider")
    implementation project(":library:statusbarutil")
    implementation project(":library:easyrecyclerview")
    implementation project(":library:pdialog")
    implementation project(":library:matisse")
    implementation project(":library:imagezipper")
    implementation project(":library:bubbletabbar")
    implementation project(":library:materialratingbar")
    implementation project(":library:persistentsearchview")
    implementation project(":library:adapster")
    implementation project(":library:attributionpresenter")
    implementation project(":library:switchicon")
    implementation project(":library:swipeablerv")
    implementation project(":library:strokedtextview")
    implementation project(":library:swipereveallayout")
}
